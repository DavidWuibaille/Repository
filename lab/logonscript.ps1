# D√©finir les options en d√©but de script
# Possibilit√©s pour $ServiceOption : "Tanium", "Ivanti", "Tanium,Ivanti" ou "" (ne rien faire)
$ServiceOption = "Tanium,Ivanti"

# Possibilit√©s pour $InstallOption : "Chrome", "7Zip", "Chrome,7Zip" ou "" (ne rien installer)
$InstallOption = "Chrome,7Zip"

# Convertir les variables en tableaux
$ServiceOptionList = $ServiceOption -split ',' | ForEach-Object { $_.Trim().ToLower() }
$InstallOptionList = $InstallOption -split ',' | ForEach-Object { $_.Trim().ToLower() }

# Fonction pour d√©sactiver et arr√™ter des services
function Disable-ServiceByName ($ServiceName) {
    if (Get-Service -Name $ServiceName -ErrorAction SilentlyContinue) {
        Write-Host "üîπ D√©sactivation et arr√™t de $ServiceName..."
        Set-Service -Name $ServiceName -StartupType Disabled
        Stop-Service -Name $ServiceName -Force -ErrorAction SilentlyContinue
        Write-Host "‚úÖ Service $ServiceName d√©sactiv√© et arr√™t√©."
    }
}

function Enable-ServiceByName ($ServiceName) {
    $service = Get-Service -Name $ServiceName -ErrorAction SilentlyContinue
    if ($service) {
        Write-Host "üîπ Activation et d√©marrage de $ServiceName..."
        Set-Service -Name $ServiceName -StartupType Automatic
        Start-Service -Name $ServiceName -ErrorAction SilentlyContinue
        Write-Host "‚úÖ Service $ServiceName activ√© et d√©marr√©."
    } else {
        Write-Host "‚ùå Service $ServiceName introuvable."
    }
}


# D√©sactivation des services Tanium si s√©lectionn√©
if ($ServiceOptionList -contains "tanium") {
    Write-Host "‚úÖ D√©sactivation et arr√™t des services Tanium..."
    Disable-ServiceByName "Tanium Client"
    Disable-ServiceByName "TaniumDriverSvc"
} Else  {
    Enable-ServiceByName "Tanium Client"
    Enable-ServiceByName "TaniumDriverSvc" 
}
# D√©sactivation des services IVANTI si s√©lectionn√©
if ($ServiceOptionList -contains "ivanti") {
    Write-Host "‚úÖ D√©sactivation et arr√™t des services IVANTI..."
    $IvantiServices = Get-Service | Where-Object { $_.Name -match "^IVANTI" }
    
    if ($IvantiServices) {
        foreach ($service in $IvantiServices) {
            Disable-ServiceByName $service.Name
        }
    } else {
        Write-Host "‚ùå Aucun service IVANTI trouv√©."
    }
} Else  {
    $IvantiServices = Get-Service | Where-Object { $_.Name -match "^IVANTI" }
    
    if ($IvantiServices) {
        foreach ($service in $IvantiServices) {
            Enable-ServiceByName $service.Name
        }
    } else {
        Write-Host "‚ùå Aucun service IVANTI trouv√©."
    }


}

# Fonction pour installer des applications courantes
function Install-Application ($AppName) {
    if ($AppName -eq "chrome") {
        Write-Host "üîπ Installation de Google Chrome..."
        Start-Process -FilePath "winget" -ArgumentList "install --id Google.Chrome --silent --accept-package-agreements --accept-source-agreements" -NoNewWindow -Wait
        Write-Host "‚úÖ Google Chrome install√©."
    }
    elseif ($AppName -eq "7zip") {
        Write-Host "üîπ Installation de 7-Zip..."
        Start-Process -FilePath "winget" -ArgumentList "install --id 7zip.7zip --silent --accept-package-agreements --accept-source-agreements" -NoNewWindow -Wait
        Write-Host "‚úÖ 7-Zip install√©."
    }
}

# Installation des applications s√©lectionn√©es
if ($InstallOptionList -contains "chrome" -or $InstallOptionList -contains "7zip") {
    Write-Host "‚úÖ Installation des applications demand√©es..."
    foreach ($app in $InstallOptionList) {
        Install-Application $app
    }
} else {
    Write-Host "‚ÑπÔ∏è Aucune application √† installer."
}

# Appliquer les optimisations de performance (toujours)
Write-Host "üîπ Ajustement des param√®tres de performance..."
powercfg -change -monitor-timeout-ac 0  # Emp√™che l'√©cran de s‚Äô√©teindre en mode secteur
powercfg -change -standby-timeout-ac 0  # D√©sactive la mise en veille
Write-Host "‚úÖ Optimisation des performances appliqu√©e."

# V√©rifier si l'OS est un client Windows (Windows 10/11) et non un serveur
$OSInfo = Get-WmiObject Win32_OperatingSystem
$OSName = $OSInfo.Caption

if ($OSName -match "Windows 10|Windows 11") {
    Write-Host "‚úÖ Syst√®me d'exploitation client d√©tect√© ($OSName). Application des optimisations sp√©cifiques..."

    # D√©sactivation des services inutiles sur les OS clients
    Write-Host "üîπ D√©sactivation des services inutiles..."
    $servicesToDisable = @(
        "SysMain",          # Superfetch (inutile sur SSD)
        "DiagTrack",        # T√©l√©m√©trie Microsoft
        "dmwappushservice"  # Service de t√©l√©m√©trie
    )

    foreach ($service in $servicesToDisable) {
        Disable-ServiceByName $service
    }

    # Configuration d'un WSUS "fant√¥me" pour bloquer Windows Update sans d√©sactiver le service
    Write-Host "üîπ Configuration d'un WSUS fant√¥me pour bloquer Windows Update..."
    $RegPath = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate"
    if (!(Test-Path $RegPath)) {
        New-Item -Path $RegPath -Force | Out-Null
    }
    Set-ItemProperty -Path $RegPath -Name "WUServer" -Value "http://127.0.0.1" -Type String
    Set-ItemProperty -Path $RegPath -Name "WUStatusServer" -Value "http://127.0.0.1" -Type String
    Set-ItemProperty -Path $RegPath -Name "UseWUServer" -Value 1 -Type DWord
    Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU" -Name "UseWUServer" -Value 1 -Type DWord
    Write-Host "‚úÖ WSUS fant√¥me configur√©."

    # D√©sactivation du Pare-feu Windows
    Write-Host "üîπ D√©sactivation du Pare-feu Windows..."
    Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled False
    Write-Host "‚úÖ Pare-feu Windows d√©sactiv√©."

    # D√©sactivation de Windows Defender via la base de registre
    Write-Host "üîπ D√©sactivation de l'Antivirus Microsoft Defender..."
    $DefenderRegPath = "HKLM:\SOFTWARE\Policies\Microsoft\Windows Defender"
    if (!(Test-Path $DefenderRegPath)) {
        New-Item -Path $DefenderRegPath -Force | Out-Null
    }
    Set-ItemProperty -Path $DefenderRegPath -Name "DisableAntiSpyware" -Value 1 -Type DWord
    Set-ItemProperty -Path $DefenderRegPath -Name "DisableRealtimeMonitoring" -Value 1 -Type DWord
    Write-Host "‚úÖ Microsoft Defender d√©sactiv√©."

    # Forcer l'application des strat√©gies
    Write-Host "üîÑ Application des nouvelles configurations..."
    gpupdate /force
    Write-Host "‚úÖ Toutes les modifications ont √©t√© appliqu√©es."
} else {
    Write-Host "‚ùå OS serveur d√©tect√© ($OSName). Seules les optimisations de performance sont appliqu√©es."
}
